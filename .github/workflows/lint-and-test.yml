name: üß™ Lint and Test

on:
  push:
    branches-ignore: [wip/**]

jobs:
  lint:
    name: üîé Lint and Cover
    runs-on: ubuntu-latest
    env: { PGVERSION: 16 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with: { components: "rustfmt, clippy" }
      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install Postgres
        run: sudo ./.ci/apt-install-postgres ${{ env.PGVERSION }}
      - name: Install pgrx
        run: cargo install cargo-pgrx --locked --version "$(make pgrx-version)"
      - name: Initialize pgrx
        run: cargo pgrx init --pg${{ env.PGVERSION }}="$(which pg_config)"
      - name: Cargo format
        run: cargo fmt --all --check
      - name: Clippy
        run: cargo clippy --features pg${{ env.PGVERSION }} --no-default-features
      - name: Generate Coverage
        env: { RUST_BACKTRACE: 1, PGUSER: postgres }
        run: make cover
      - name: Publish Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: tembo-io/pg-jsonschema
          files: target/cover/cobertura.xml
      - name: Remove Data Diretory
        run: rm -rf target/pgrx-test-data-${{ env.PGVERSION }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg: [11, 12, 13, 14, 15, 16]
        os: [[üêß, Ubuntu]] # [üçé, macOS], [ü™ü, Windows]]
    name: üêò Postgres ${{ matrix.pg }} on ${{ matrix.os[0] }} ${{ matrix.os[1] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Postgres ${{ matrix.pg }}
        run: sudo ./.ci/apt-install-postgres ${{ matrix.pg }}
      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install pgrx
        run: cargo install cargo-pgrx --locked --version "$(make pgrx-version)"
      - name: Remove Data Diretory
        run: rm -rf target/pgrx-test-data-${{ matrix.pg }}
      - name: Initialize pgrx
        run: cargo pgrx init --pg${{ matrix.pg }}="$(which pg_config)"
      - name: Run the tests
        env: { RUST_BACKTRACE: 1, PGUSER: postgres }
        run: cargo test --all --no-default-features --features "pg${{ matrix.pg }} pg_test" -- --nocapture
      - name: Remove Data Diretory
        run: rm -rf target/pgrx-test-data-${{ matrix.pg }}
